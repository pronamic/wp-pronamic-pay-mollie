/* global Mollie */

'use strict';

/**
 * Mollie Components.
 *
 * @link https://docs.mollie.com/components/overview
 */
($ => {
  const componentItems = [{
    id: 'card-number',
    label: 'Card Number',
    component: 'cardNumber'
  }, {
    id: 'card-holder',
    label: 'Card Holder',
    component: 'cardHolder'
  }, {
    id: 'expiry-date',
    label: 'Expiry Date',
    component: 'expiryDate'
  }, {
    id: 'verification-code',
    label: 'Verification Code',
    component: 'verificationCode'
  }];
  function returnFalse() {
    return false;
  }
  function initMollieComponents() {
    const $elements = document.querySelectorAll('.pronamic_pay_mollie_card_token');
    $elements.forEach($element => {
      const data = $element.dataset;
      if (!("mollie-profile-id" in data)) {
        throw new Error('No Mollie profile ID in element dataset. Unable to load Mollie Components.');
        return;
      }

      // Initialize Mollie object.
      const mollie = Mollie(data['mollie-profile-id'], {
        locale: data['mollie-locale'] ?? null,
        testmode: "mollie-testmode" in data
      });

      // Create components.
      componentItems.forEach(item => {
        // Field label.
        let label = document.createElement('label');
        label.setAttribute('for', item.id);
        label.innerText = item.label;

        // Field container.
        let field = document.createElement('div');
        field.setAttribute('id', item.id);

        // Field error.
        let error = document.createElement('div');
        error.setAttribute('id', item.id + '-error');
        error.setAttribute('role', 'alert');
        error.classList.add('field-error');
        $element.append(label, field, error);

        // Create and mount component.
        let component = mollie.createComponent(item.component);
        component.mount('#' + item.id);

        // Handling errors.
        component.addEventListener('change', event => {
          error.textContent = event.error && event.touched ? event.error : '';
        });
      });

      // Get token on form submit.
      let form = $element.closest('form'),
        $form = $(form);

      // Prevent placing order, need to create token first.
      $form.on('checkout_place_order_pronamic_pay_credit_card', returnFalse);

      // Create Mollie token on checkout submit.
      $form.on('submit', async e => {
        e.preventDefault();

        // Check card token input.
        let cardTokenInput = form.querySelector('input[name="pronamic_pay_mollie_card_token"]');
        if (cardTokenInput) {
          return;
        }

        // Create Mollie token.
        const {
          token,
          error
        } = await mollie.createToken();
        if (error) {
          throw new Error(error.message || '');
        }

        // Add token to the form.
        const tokenInput = document.createElement('input');
        tokenInput.setAttribute('type', 'hidden');
        tokenInput.setAttribute('name', 'pronamic_pay_mollie_card_token');
        tokenInput.setAttribute('value', token);
        form.append(tokenInput);

        // Re-enable placing order again.
        $form.off('checkout_place_order_pronamic_pay_credit_card', returnFalse);

        // Submit form, now containing the hidden card token field.
        $form.submit();
      });
    });
  }

  // Init Mollie Components.
  document.addEventListener('DOMContentLoaded', initMollieComponents);

  // WooCommerce support.
  $(document.body).on('updated_checkout', initMollieComponents);
})(jQuery);
//# sourceMappingURL=components.js.map